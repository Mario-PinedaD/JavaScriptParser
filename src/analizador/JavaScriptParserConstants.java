/* Generated By:JavaCC: Do not edit this line. JavaScriptParserConstants.java */
/** Analizador de un subconjunto del lenguaje JavaScript. */
package analizador;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JavaScriptParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int AWAIT = 7;
  /** RegularExpression Id. */
  int BREAK = 8;
  /** RegularExpression Id. */
  int CASE = 9;
  /** RegularExpression Id. */
  int CATCH = 10;
  /** RegularExpression Id. */
  int CLASS = 11;
  /** RegularExpression Id. */
  int CONSOLE = 12;
  /** RegularExpression Id. */
  int CONST = 13;
  /** RegularExpression Id. */
  int CONTINUE = 14;
  /** RegularExpression Id. */
  int DEBUGGER = 15;
  /** RegularExpression Id. */
  int DEFAUL = 16;
  /** RegularExpression Id. */
  int DELETE = 17;
  /** RegularExpression Id. */
  int DO = 18;
  /** RegularExpression Id. */
  int ELSE = 19;
  /** RegularExpression Id. */
  int ENUM = 20;
  /** RegularExpression Id. */
  int EXPORT = 21;
  /** RegularExpression Id. */
  int EXTENDS = 22;
  /** RegularExpression Id. */
  int FALSE = 23;
  /** RegularExpression Id. */
  int FINALLY = 24;
  /** RegularExpression Id. */
  int FOR = 25;
  /** RegularExpression Id. */
  int FUNCTION = 26;
  /** RegularExpression Id. */
  int IF = 27;
  /** RegularExpression Id. */
  int IMPLEMENTS = 28;
  /** RegularExpression Id. */
  int IMPORT = 29;
  /** RegularExpression Id. */
  int IN = 30;
  /** RegularExpression Id. */
  int INSTANCEOF = 31;
  /** RegularExpression Id. */
  int INTERFACE = 32;
  /** RegularExpression Id. */
  int LET = 33;
  /** RegularExpression Id. */
  int LOG = 34;
  /** RegularExpression Id. */
  int NEW = 35;
  /** RegularExpression Id. */
  int NULL = 36;
  /** RegularExpression Id. */
  int OF = 37;
  /** RegularExpression Id. */
  int PACKAGE = 38;
  /** RegularExpression Id. */
  int PRIVATE = 39;
  /** RegularExpression Id. */
  int PROTECTED = 40;
  /** RegularExpression Id. */
  int PUBLIC = 41;
  /** RegularExpression Id. */
  int RETURN = 42;
  /** RegularExpression Id. */
  int SUPER = 43;
  /** RegularExpression Id. */
  int SWITCH = 44;
  /** RegularExpression Id. */
  int STATIC = 45;
  /** RegularExpression Id. */
  int THIS = 46;
  /** RegularExpression Id. */
  int THROW = 47;
  /** RegularExpression Id. */
  int TRY = 48;
  /** RegularExpression Id. */
  int TYPEOF = 49;
  /** RegularExpression Id. */
  int TRUE = 50;
  /** RegularExpression Id. */
  int VAR = 51;
  /** RegularExpression Id. */
  int VOID = 52;
  /** RegularExpression Id. */
  int WHILE = 53;
  /** RegularExpression Id. */
  int WITH = 54;
  /** RegularExpression Id. */
  int YIELD = 55;
  /** RegularExpression Id. */
  int IDENTIFICADOR = 56;
  /** RegularExpression Id. */
  int INT = 57;
  /** RegularExpression Id. */
  int FLOAT = 58;
  /** RegularExpression Id. */
  int STRING = 59;
  /** RegularExpression Id. */
  int PARENTESIS_I = 60;
  /** RegularExpression Id. */
  int PARENTESIS_D = 61;
  /** RegularExpression Id. */
  int LLAVE_IZQ = 62;
  /** RegularExpression Id. */
  int LLAVE_DER = 63;
  /** RegularExpression Id. */
  int CORCHETE_IZQ = 64;
  /** RegularExpression Id. */
  int CORCHETE_DER = 65;
  /** RegularExpression Id. */
  int PUNTO_Y_COMA = 66;
  /** RegularExpression Id. */
  int DOS_PUNTOS = 67;
  /** RegularExpression Id. */
  int COMA = 68;
  /** RegularExpression Id. */
  int PUNTO = 69;
  /** RegularExpression Id. */
  int MAS = 70;
  /** RegularExpression Id. */
  int MENOS = 71;
  /** RegularExpression Id. */
  int MULT = 72;
  /** RegularExpression Id. */
  int DIV = 73;
  /** RegularExpression Id. */
  int MOD = 74;
  /** RegularExpression Id. */
  int IGUAL = 75;
  /** RegularExpression Id. */
  int EXPONENCIAL = 76;
  /** RegularExpression Id. */
  int A_SUMA = 77;
  /** RegularExpression Id. */
  int A_RESTA = 78;
  /** RegularExpression Id. */
  int A_MULTIPLICACION = 79;
  /** RegularExpression Id. */
  int A_DIVISION = 80;
  /** RegularExpression Id. */
  int A_MODULO = 81;
  /** RegularExpression Id. */
  int A_EXPONENCIACION = 82;
  /** RegularExpression Id. */
  int A_AND = 83;
  /** RegularExpression Id. */
  int A_OR = 84;
  /** RegularExpression Id. */
  int A_XOR = 85;
  /** RegularExpression Id. */
  int ES_IGUAL = 86;
  /** RegularExpression Id. */
  int NO_ES_IGUAL = 87;
  /** RegularExpression Id. */
  int MENOR = 88;
  /** RegularExpression Id. */
  int MAYOR = 89;
  /** RegularExpression Id. */
  int MENOR_IGUAL_QUE = 90;
  /** RegularExpression Id. */
  int MAYOR_IGUAL_QUE = 91;
  /** RegularExpression Id. */
  int IGUALDAD_ESTRICTA = 92;
  /** RegularExpression Id. */
  int DESIGUALDAD_ESTRICTA = 93;
  /** RegularExpression Id. */
  int AND_LOGICO = 94;
  /** RegularExpression Id. */
  int OR_LOGICO = 95;
  /** RegularExpression Id. */
  int NOT_LOGICO = 96;
  /** RegularExpression Id. */
  int AND_BIT = 97;
  /** RegularExpression Id. */
  int OR_BIT = 98;
  /** RegularExpression Id. */
  int XOR_BIT = 99;
  /** RegularExpression Id. */
  int NOT_BIT = 100;
  /** RegularExpression Id. */
  int INCREMENTO = 101;
  /** RegularExpression Id. */
  int DECREMENTO = 102;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\"await\"",
    "\"break\"",
    "\"case\"",
    "\"catch\"",
    "\"class\"",
    "\"console\"",
    "\"const\"",
    "\"continue\"",
    "\"debugger\"",
    "\"default\"",
    "\"delete\"",
    "\"do\"",
    "\"else\"",
    "\"enum\"",
    "\"export\"",
    "\"extends\"",
    "\"false\"",
    "\"finally\"",
    "\"for\"",
    "\"function\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"in\"",
    "\"instanceof\"",
    "\"interface\"",
    "\"let\"",
    "\"log\"",
    "\"new\"",
    "\"null\"",
    "\"OFF\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"super\"",
    "\"switch\"",
    "\"static\"",
    "\"this\"",
    "\"throw\"",
    "\"try\"",
    "\"typeof\"",
    "\"true\"",
    "\"var\"",
    "\"void\"",
    "\"while\"",
    "\"with\"",
    "\"yield\"",
    "<IDENTIFICADOR>",
    "<INT>",
    "<FLOAT>",
    "<STRING>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\":\"",
    "\",\"",
    "\".\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\"**\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"**=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"===\"",
    "\"!==\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"~\"",
    "\"++\"",
    "\"--\"",
  };

}
