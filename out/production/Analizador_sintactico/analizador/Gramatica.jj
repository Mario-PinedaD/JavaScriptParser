options {
/*El IGNORE_CASE hace que sea insensible a las mayusculas, minusculas
  Por otro lado, el static, especifica que el analizadór generará o no métodos y variables estáticas.
*/
  IGNORE_CASE = true;
  STATIC = false;
}

º //Aqui hay una bolita que no se que sea, sinceramente º

/*El "PARSER_BEGIN" y el "PARSER_END" encierran la definición de la clase del analizador
    este se llama "Gramatica" y pertenece al paquete "Analizador"*/
PARSER_BEGIN(Gramatica)
package Analizador;
public class Gramatica {
}
PARSER_END(Gramatica)

/** Lexico */
/* Un skip de todos los caracteres que deben ser ignorados*/
SKIP : {
      " "
    | "\t"
    | "\r"
    | "\n"
}

/*Los tipos de tokens que el analizador va a reconocer*/
TOKEN : {
      <INT: (["0"-"9"])+>
    | <FLOAT: (["0"-"9"])+ "." (["0"-"9"])+>
    | <STRING: "\"" (~["\""])* "\"">
    | <IDENTIFICADOR: (["a"-"z","A"-"Z","_"]) (["a"-"z","A"-"Z","_"])*>
    | <PARENTESIS_IZQ: "("> 
   | <PARENTESIS_DER: ")">
    | <CORCHETE_IZQ: "[">
    | <CORCHETE_DER: "]">
    | <LLAVE_IZQ: "{">
    | <LLAVE_DER: "}">
    | <COMA: ",">
    | <PUNTO_Y_COMA: ";">
    | <PUNTO: ".">
    | <SUMA: "+">
    | <RESTA: "-">
    | <MULTIPLICACION: "*">
    | <DIVISION: "/">

    //Palabras reservadas
    | <AWAIT: "await">
    | <BREAK: "break">
    | <CASE: "case">
    | <CATCH: "catch">
    | <CLASS: "class">
    | <CONSOLE: "console">
    | <CONST: "const">
    | <CONTINUE: "continue">
    | <DEBUGGER: "debugger">
    | <DEFAULT: "default">
    | <DELETE: "delete">
    | <DO: "do">
    | <ELSE: "else">
    | <ENUM: "enum">
    | <EXPORT: "export">
    | <EXTENDS: "extends">
    | <FALSE: "false">
    | <FINALLY: "finally">
    | <FOR: "for">
    | <FUNCTION: "function">
    | <IF: "if">
    | <IMPLEMENTS: "implements">
    | <IMPORT: "import">
    | <IN: "in">
    | <INSTANCEOF: "instanceof">
    | <INTERFACE: "interface">
    | <LET: "let">
    | <LOG: "log">
    | <NEW: "new">
    | <NULL: "null">
    | <PACKAGE: "package">
    | <PRIVATE: "private">
    | <PROTECTED: "protected">
    | <PUBLIC: "public">
    | <RETURN: "return">
    | <SUPER: "super">
    | <SWITCH: "switch">
    | <STATIC: "static">
    | <THIS: "this">
    | <THROW: "throw">
    | <TRY: "try">
    | <TYPEOF: "typeof">
    | <TRUE: "true">
    | <VAR: "var">
    | <VOID: "void">
    | <WHILE: "while">
    | <WITH: "with">
    | <YIELD: "yield">
}
/** Fin Lexico */

/** Producción inicial
    Analizar -> (Instruccion)+ EOF??
*/
void Analizar() :
{}
{
  (Instruccion)()+ <EOF>
}

/** Instruccion -> evaluar [ Expresion ]; */
void Instruccion() :
{double e;}
{
  <EVALUAR> <CORI> e = Expresion() <CORD> <PCOMA> {System.out.println("El valor de la expresion es: "+e);}
}

/** Expresion -> ExpresionMultiplicativa ('+' ExpresionMultiplicativa)*
              |  ExpresionMultiplicativa ('-' ExpresionMultiplicativa)*
*/
double Expresion() :
{double e, e1;}
{
    e=ExpresionMultiplicativa()
    (
        <MAS> e1=ExpresionMultiplicativa() {e += e1;}
        |
        <MENOS> e1=ExpresionMultiplicativa() {e -= e1;}
    )*
    {return e;}
}

/** ExpresionMultiplicativa -> ExpresionUnaria ('*' ExpresionUnaria)*
                            |  ExpresionUnaria ('/' ExpresionUnaria)*
*/
double ExpresionMultiplicativa() :
{double e, e1;}
{
    e=ExpresionUnaria()
    (
        <POR> e1=ExpresionUnaria() {e *= e1;}
        |
        <DIV> e1=ExpresionUnaria() {e /= e1;}
    )*
    {return e;}
}

/** ExpresionUnaria -> '-' ExpresionUnaria
                    |  Primitivo
 */
double ExpresionUnaria() :
{double e;}
{
    <MENOS> e=ExpresionUnaria() {return -e;}
    |
    e=Primitivo() {return e;}
}

/** Primitivo -> Numero
              |  Decimal
              |  '(' Expresion ')'
*/
double Primitivo() :
{double e;}
{
    <NUMERO> {return Double.parseDouble(token.image);}
    |
    <DECIMAL> {return Double.parseDouble(token.image);}
    |
    <PARENI> e=Expresion() <PAREND> {return e;}
}